from ...mixin import TemplateRendererMixin
from ...__version__ import get_version
from argparse import ArgumentParser
from pathlib import Path


class StepMin(TemplateRendererMixin):
    template = f"# Generated by fmojinja version {get_version()}" + """
MD_ENGINE = sander # e.g. sander, pmemd, pmemd.cuda, mpi -n 8 pmemd.MPI
MIN :={% for _ in title %} min{{ loop.index }}.mdin{% endfor %}

.PHONY: clean
clean:
\trm min*.* 

.PHONY: run
run: $(MIN) min{{ title | length }}.restrt 

{% for i in title %}
min{{ loop.index }}.mdin:
\tpython -m fmojinja.sander min -t {{i}} \
-rm "{{ restraint_mask[loop.index - 1] }}" \
-rw {{ restraint_wt[loop.index - 1] }} \
-mc {{ maxcyc }} \
-ig {{ seed }} > $@
{%- endfor %}

{% for i in title %}
{%- if loop.index > 1 %}
min{{ loop.index }}.restrt: min{{ loop.index - 1 }}.restrt
\t$(MD_ENGINE) -O -i ${@:%.restrt=%.mdin} -o ${@:%.restrt=%.mdout} -p {{ prmtop }} -c ${<:%.restrt=%.restrt} -ref {{ inpcrd }} -r $@ -inf ${@:%.restrt=%.mdinfo}  
{%- else %}
min{{ loop.index }}.restrt:
\t$(MD_ENGINE) -O -i ${@:%.restrt=%.mdin} -o ${@:%.restrt=%.mdout} -p {{ prmtop }} -c {{ inpcrd }} -ref {{ inpcrd }} -r $@ -inf ${@:%.restrt=%.mdinfo}
{%- endif %}
{%- endfor %}


"""

    @classmethod
    def set_arguments(cls, p: ArgumentParser) -> ArgumentParser:
        p = super(StepMin, cls).set_arguments(p)
        p.add_argument("-t", "--title", nargs="+", help="title for the input.")
        p.add_argument("-mc", "--maxcyc", default=10000)
        p.add_argument("--drms", default=1e-4)
        p.add_argument("-rm", "--restraint-mask", nargs="+", required=True, help="restraint mask. e.g. '!@H=' ")
        p.add_argument("-rw", "--restraint-wt", nargs="+", required=True, help="the weight (kcal/mol angstrom) for the positional restraints")
        p.add_argument("-ig", "--seed", default=-1)
        p.add_argument("-p", "--prmtop", type=Path)
        p.add_argument("-c", "--inpcrd", type=Path)
        return p