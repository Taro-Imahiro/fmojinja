from ...mixin import TemplateRendererMixin
from ...__version__ import get_version
from argparse import ArgumentParser
from pathlib import Path
from jinja2 import Environment
from ...jinja_filters import broadcast_n
from textwrap import dedent


class StepMin(TemplateRendererMixin):
    @classmethod
    def template(cls) -> str:
        return f"# Generated by fmojinja version {get_version()}" + """
MD_ENGINE = sander # e.g. sander, pmemd, pmemd.cuda, mpi -n 8 pmemd.MPI
MIN :={% for _ in title %} min{{ loop.index }}.mdin{% endfor %}

.PHONY: clean
clean:
\trm min*.* 

.PHONY: run
run: $(MIN) min{{ title | length }}.restrt 

{% for i in range(1, nsteps + 1) %}
min{{ i }}.mdin:
\tpython -m fmojinja.sander min -t {{ title | broadcast(i) }} \
-rm "{{ restraint_mask | broadcast(i) }}" \
-rw {{ restraint_wt | broadcast(i) }} \
-mc {{ maxcyc }} \
--drms {{ drms }} \
-co {{ cut_off }} \
-ig {{ seed }} > $@
{%- endfor %}

define sander_expr 
min$(1).restrt: min$(2).restrt
\t$(MD_ENGINE) -O \
-i min$(1).mdin \
-o min$(1).mdout \
-p {{ prmtop }} \
-c min$(2).restrt \
-ref {{ inpcrd }} \
-r min$(1).restrt \
-inf min$(1).mdinfo 
endef
$(foreach i,$(shell seq {{ title | length }} -1 1),$(eval $(call sander_expr,$(i),$(shell expr $(i) - 1))))

min0.restrt:
\tcp {{ inpcrd }} $@

"""

    @classmethod
    def render(cls, **kwargs) -> str:
        env = Environment()
        env.filters["broadcast"] = broadcast_n(kwargs.get("nsteps"))
        return env.from_string(cls.template()).render(**kwargs)

    @classmethod
    def set_arguments(cls, p: ArgumentParser) -> ArgumentParser:
        p = super(StepMin, cls).set_arguments(p)
        p.add_argument("-ns", "--nsteps", type=int, required=True, help="number of steps")
        p.add_argument("-t", "--title", nargs="+", help="title for the input.")
        p.add_argument("-mc", "--maxcyc", default=10000)
        p.add_argument("-co", "--cut-off", default=12.0)
        p.add_argument("--drms", default=1e-4)
        p.add_argument("-rm", "--restraint-mask", nargs="+", required=True, help="restraint mask. e.g. '!@H=' ")
        p.add_argument("-rw", "--restraint-wt", nargs="+", required=True, help="the weight (kcal/mol angstrom) for the positional restraints")
        p.add_argument("-ig", "--seed", default=-1)
        p.add_argument("-p", "--prmtop", type=Path, required=True)
        p.add_argument("-c", "--inpcrd", type=Path, required=True)
        return p